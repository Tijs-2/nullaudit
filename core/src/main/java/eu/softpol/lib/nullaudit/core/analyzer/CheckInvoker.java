package eu.softpol.lib.nullaudit.core.analyzer;

import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.NAClass;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.NAComponent;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.NAField;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.NAMethod;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.NAPackage;
import eu.softpol.lib.nullaudit.core.check.Checker;
import eu.softpol.lib.nullaudit.core.check.ClassChecker;
import eu.softpol.lib.nullaudit.core.check.ClassChecker.AddIssue;
import eu.softpol.lib.nullaudit.core.check.PackageInfoChecker;
import eu.softpol.lib.nullaudit.core.report.Issue;
import eu.softpol.lib.nullaudit.core.report.Kind;
import eu.softpol.lib.nullaudit.core.report.ReportBuilder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.jspecify.annotations.Nullable;

public class CheckInvoker {

  private final AnalysisContext context;
  private final ReportBuilder reportBuilder;
  private final List<Checker> checks;

  public CheckInvoker(AnalysisContext context, ReportBuilder reportBuilder, List<Checker> checks) {
    this.context = context;
    this.reportBuilder = reportBuilder;
    this.checks = checks;
  }

  public void checkPackage(NAPackage naPackage) {
    checks.stream()
        .filter(c -> c instanceof PackageInfoChecker)
        .map(c -> (PackageInfoChecker) c)
        .forEach(c -> c.checkPackage(naPackage, (k, m) -> appendIssue(naPackage, k, m)));
  }

  public void checkClass(NAClass naClass) {
    boolean unspecifiedNullnessFound = false;

    reportBuilder.incSummaryTotalClasses();

    var issuesForClass = new HashMap<String, List<Kind>>();
    checks.stream()
        .filter(c -> c instanceof ClassChecker)
        .map(c -> (ClassChecker) c)
        .forEach(c -> c.checkClass(naClass, new AddIssue() {
          @Override
          public void addIssueForClass(Kind kind, String message) {
            appendIssue(naClass, kind, message);
          }

          @Override
          public void addIssueForField(NAField field, Kind kind, String message) {
            appendIssue(naClass, field.fieldName(), kind, message);
            issuesForClass.computeIfAbsent(field.fieldName(), k -> new ArrayList<>())
                .add(kind);
          }

          @Override
          public void addIssueForComponent(NAComponent component, Kind kind, String message) {
            appendIssue(naClass, component.componentName(), kind, message);
            issuesForClass.computeIfAbsent(component.componentName(), k -> new ArrayList<>())
                .add(kind);
          }

          @Override
          public void addIssueForMethod(NAMethod method, Kind kind, String message) {
            appendIssue(naClass, method.descriptiveMethodName(), kind, message);
            issuesForClass.computeIfAbsent(method.descriptiveMethodName(), k -> new ArrayList<>())
                .add(kind);
          }
        }));

    for (var componentInfo : naClass.components()) {
      reportBuilder.incSummaryTotalFields();

      if (issuesForClass.getOrDefault(componentInfo.componentName(), List.of())
          .contains(Kind.UNSPECIFIED_NULLNESS)) {
        reportBuilder.incSummaryUnspecifiedNullnessFields();
        unspecifiedNullnessFound = true;
      }
    }

    for (var fieldInfo : naClass.fields()) {
      if (naClass.isRecord()) {
        // generated by compiler - ignore
        continue;
      }
      reportBuilder.incSummaryTotalFields();

      if (issuesForClass.getOrDefault(fieldInfo.fieldName(), List.of())
          .contains(Kind.UNSPECIFIED_NULLNESS)) {
        reportBuilder.incSummaryUnspecifiedNullnessFields();
        unspecifiedNullnessFound = true;
      }
    }

    for (var methodInfo : naClass.methods()) {
      reportBuilder.incSummaryTotalMethods();
      if (issuesForClass.getOrDefault(methodInfo.descriptiveMethodName(), List.of())
          .contains(Kind.UNSPECIFIED_NULLNESS)) {
        reportBuilder.incSummaryUnspecifiedNullnessMethods();
        unspecifiedNullnessFound = true;
      }
    }

    if (unspecifiedNullnessFound) {
      reportBuilder.incSummaryUnspecifiedNullnessClasses();
    }
  }

  private void appendIssue(NAPackage naPackage, Kind kind, String message) {
    var location = "";
    if (context.getModuleName() != null) {
      location = context.getModuleName() + "/";
    }
    location += naPackage.packageName() + ".package-info";

    reportBuilder.addIssue(new Issue(
        location,
        kind,
        message
    ));
  }

  private void appendIssue(NAClass naClass, @Nullable String name, Kind kind, String message) {
    var location = "";
    if (context.getModuleName() != null) {
      location = context.getModuleName() + "/";
    }
    location += naClass.thisClazz().name();
    if (name != null) {
      location += "#" + name;
    }

    reportBuilder.addIssue(new Issue(
        location,
        kind,
        message
    ));
  }

  private void appendIssue(NAClass naClass, Kind kind, String message) {
    appendIssue(naClass, null, kind, message);
  }
}
