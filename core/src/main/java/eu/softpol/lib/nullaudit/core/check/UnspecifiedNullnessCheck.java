package eu.softpol.lib.nullaudit.core.check;

import eu.softpol.lib.nullaudit.core.analyzer.NullScope;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.VisitedClass;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.VisitedComponent;
import eu.softpol.lib.nullaudit.core.analyzer.visitor.context.VisitedPackage;
import eu.softpol.lib.nullaudit.core.i18n.MessageSolver;
import eu.softpol.lib.nullaudit.core.report.Kind;
import eu.softpol.lib.nullaudit.core.type.translator.AugmentedStringTranslator;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

public class UnspecifiedNullnessCheck implements Check {

  private final MessageSolver messageSolver;

  public UnspecifiedNullnessCheck(MessageSolver messageSolver) {
    this.messageSolver = messageSolver;
  }

  @Override
  public void checkModule() {
    // NOP
  }

  @Override
  public void checkPackage(VisitedPackage visitedPackage, BiConsumer<Kind, String> addIssue) {
    // NOP
  }

  @Override
  public void checkClass(VisitedClass visitedClass, AddIssue addIssue) {
    var classAugmentedStringTranslator =
        new AugmentedStringTranslator(visitedClass.effectiveNullScope());

    if (visitedClass.effectiveNullScope() != NullScope.NULL_MARKED) {

      for (var componentInfo : visitedClass.components()) {
        var s = "%s %s".formatted(
            classAugmentedStringTranslator.translate(componentInfo.fs()),
            componentInfo.componentName()
        );
        if (s.contains("*")) {
          addIssue.addIssueForField(
              componentInfo.componentName(),
              Kind.UNSPECIFIED_NULLNESS,
              messageSolver.issueUnspecifiedNullnessComponent(
                  s,
                  s.replaceAll("[^*]", " ").replace("*", "^")
              ));
        }
      }

      for (var fieldInfo : visitedClass.fields()) {
        if (visitedClass.isRecord()) {
          // generated by compiler - ignore
          continue;
        }

        var s = "%s %s".formatted(
            classAugmentedStringTranslator.translate(fieldInfo.fs()),
            fieldInfo.fieldName()
        );
        if (s.contains("*")) {
          addIssue.addIssueForField(
              fieldInfo.fieldName(),
              Kind.UNSPECIFIED_NULLNESS,
              messageSolver.issueUnspecifiedNullnessField(
                  s,
                  s.replaceAll("[^*]", " ").replace("*", "^")
              ));
        }
      }
    }

    for (var methodInfo : visitedClass.methods()) {

      if (visitedClass.isRecord()) {
        var methodName = methodInfo.methodName();
        if (methodName.equals("equals")) {
          continue;
        }
        if (methodName.equals("toString")) {
          continue;
        }

        if (visitedClass.getComponent(methodName)
                .filter(c -> classAugmentedStringTranslator.translate(c.fs())
                    .equals(classAugmentedStringTranslator.translate(methodInfo.ms().returnType())))
                .isPresent()
            && methodInfo.ms().parameterTypes().isEmpty()
        ) {
          // skip default getter
          continue;
        }
        if (methodName.equals("<init>") && methodInfo.ms().parameterTypes().stream()
            .map(classAugmentedStringTranslator::translate)
            .collect(Collectors.joining(",")).equals(visitedClass.components().stream()
                .map(VisitedComponent::fs)
                .map(classAugmentedStringTranslator::translate)
                .collect(Collectors.joining(",")))
        ) {
          // skip default constructor
          continue;
        }
      }

      if (methodInfo.effectiveNullScope() != NullScope.NULL_MARKED) {
        var augmentedStringTranslator = new AugmentedStringTranslator(
            methodInfo.effectiveNullScope());
        var s = "%s %s(%s)".formatted(
            augmentedStringTranslator.translate(methodInfo.ms().returnType()),
            methodInfo.methodName(),
            methodInfo.ms()
                .parameterTypes().stream()
                .map(augmentedStringTranslator::translate)
                .collect(Collectors.joining(", "))
        );
        if (s.contains("*")) {
          addIssue.addIssueForMethod(
              methodInfo.descriptiveMethodName(),
              Kind.UNSPECIFIED_NULLNESS,
              messageSolver.issueUnspecifiedNullnessMethod(
                  s,
                  s.replaceAll("[^*]", " ").replace("*", "^")
              ));
        }
      }
    }
  }
}
